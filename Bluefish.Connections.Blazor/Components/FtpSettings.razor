@inherits SettingsBase<FtpConnection>

<div class="@CssClass">
    <label class="form-label">FTP Host</label>
    <InputText ValueExpression="@(() => _connection.FtpHost)"
               Value="@_connection.FtpHost"
               ValueChanged="(v) => OnValueChanged(x => x.FtpHost, v)"
               class="form-control form-control-sm"
               disabled="@(!CanEdit)" />
    <div class="form-text">Name or IP address of FTP Host.</div>
    <ValidationMessage For="() => _connection.FtpHost" />
</div>

<div class="@CssClass">
    <label class="form-label">FTP Port</label>
    <InputNumber TValue="int"
                 ValueExpression="@(() => _connection.FtpPort)"
                 Value="@_connection.FtpPort"
                 ValueChanged="(v) => OnValueChanged(x => x.FtpPort, v)"
                 class="form-control form-control-sm"
                 min="0"
                 max="65535"
                 disabled="@(!CanEdit)" />
    <div class="form-text">Port number to connect to on host.</div>
    <ValidationMessage For="() => _connection.FtpPort" />
</div>

<div class="@CssClass">
    <label class="form-label">FTP Username</label>
    <InputText ValueExpression="@(() => _connection.FtpUsername)"
               Value="@_connection.FtpUsername"
               ValueChanged="(v) => OnValueChanged(x => x.FtpUsername, v)"
               class="form-control form-control-sm"
               disabled="@(!CanEdit)" />
    <div class="form-text">Username of account to connect with.</div>
    <ValidationMessage For="() => _connection.FtpUsername" />
</div>

<div class="@CssClass">
    <label class="form-label">FTP Password</label>
    <InputText ValueExpression="@(() => _connection.FtpPassword)"
               Value="@_connection.FtpPassword"
               ValueChanged="(v) => OnValueChanged(x => x.FtpPassword, v)"
               class="form-control form-control-sm"
               type="password"
               disabled="@(!CanEdit)" />
    <div class="form-text">Password of account to connect with.</div>
    <ValidationMessage For="() => _connection.FtpPassword" />
</div>

<div class="@CssClass">
    <label class="form-label">FTP Timeout</label>
    <InputNumber TValue="int"
                 ValueExpression="@(() => _connection.FtpTimeout)"
                 Value="@_connection.FtpTimeout"
                 ValueChanged="(v) => OnValueChanged(x => x.FtpTimeout, v)"
                 class="form-control form-control-sm"
                 min="0"
                 disabled="@(!CanEdit)" />
    <div class="form-text">Timeout of connection attempt (in milliseconds).</div>
    <ValidationMessage For="() => _connection.FtpTimeout" />
</div>

<div class="@CssClass">
    <label class="form-label">SSL Mode</label>
    <InputSelect TValue="FtpSslModes"
                 ValueExpression="@(() => _connection.SslMode)"
                 Value="@_connection.SslMode"
                 ValueChanged="(v) => OnValueChanged(x => x.SslMode, v)"
                 class="form-control form-control-sm"
                 disabled="@(!CanEdit)">
        <option value="@FtpSslModes.None">None</option>
        <option value="@FtpSslModes.Implicit">Implicit</option>
        <option value="@FtpSslModes.Explicit">Explicit</option>
    </InputSelect>
    <div class="form-text">SSL mode to use on connections.</div>
    <ValidationMessage For="() => _connection.SslMode" />
</div>

<div class="@CssClass">
    <label class="form-label">Root Folder</label>
    <InputText ValueExpression="@(() => _connection.RootFolder)"
               Value="@_connection.RootFolder"
               ValueChanged="(v) => OnValueChanged(x => x.RootFolder, v)"
               class="form-control form-control-sm"
               disabled="@(!CanEdit)" />
    <div class="form-text">Root folder where files will be placed under. Leave blank for root folder. Use forward slashes to separate sub folders (e.g. /voicenet/recordings)</div>
    <ValidationMessage For="() => _connection.RootFolder" />
</div>

<div class="@CssClass">
    <label class="form-label">Proxy Type</label>
    <InputSelect TValue="FtpProxyServerTypes"
                 ValueExpression="@(() => _connection.ProxyType)"
                 Value="@_connection.ProxyType"
                 ValueChanged="(v) => OnValueChanged(x => x.ProxyType, v)"
                 class="form-control form-control-sm"
                 disabled="@(!CanEdit)">
        <option value="@FtpProxyServerTypes.None">None</option>
        <option value="@FtpProxyServerTypes.Socks4">Socks4</option>
        <option value="@FtpProxyServerTypes.Socks4a">Socks4a</option>
        <option value="@FtpProxyServerTypes.Socks5">Socks5</option>
        <option value="@FtpProxyServerTypes.HttpConnect">HttpConnect</option>
        <option value="@FtpProxyServerTypes.FtpSite">FtpSite</option>
        <option value="@FtpProxyServerTypes.FtpUser">FtpUser</option>
        <option value="@FtpProxyServerTypes.FtpOpen">FtpOpen</option>
        <option value="@FtpProxyServerTypes.FtpDoubleLogin">FtpDoubleLogin</option>
    </InputSelect>
    <div class="form-text">Proxy mode to use for connection.</div>
    <ValidationMessage For="() => _connection.ProxyType" />
</div>

@if (_connection.ProxyType != FtpProxyServerTypes.None)
{
    <div class="@CssClass">
        <label class="form-label">Proxy Server</label>
        <InputText ValueExpression="@(() => _connection.ProxyServer)"
               Value="@_connection.ProxyServer"
               ValueChanged="(v) => OnValueChanged(x => x.ProxyServer, v)"
               class="form-control form-control-sm"
               disabled="@(!CanEdit)" />
        <div class="form-text">Name or IP address of proxy server.</div>
        <ValidationMessage For="() => _connection.ProxyServer" />
    </div>

    <div class="@CssClass">
        <label class="form-label">Proxy Port</label>
        <InputNumber TValue="int"
                 ValueExpression="@(() => _connection.ProxyPort)"
                 Value="@_connection.ProxyPort"
                 ValueChanged="(v) => OnValueChanged(x => x.ProxyPort, v)"
                 class="form-control form-control-sm"
                 min="0"
                 max="65535"
                 disabled="@(!CanEdit)" />
        <div class="form-text">Port number to connect to on proxy server.</div>
        <ValidationMessage For="() => _connection.ProxyPort" />
    </div>

    <div class="@CssClass">
        <label class="form-label">Proxy Username</label>
        <InputText ValueExpression="@(() => _connection.FtpUsername)"
               Value="@_connection.ProxyUser"
               ValueChanged="(v) => OnValueChanged(x => x.ProxyUser, v)"
               class="form-control form-control-sm"
               disabled="@(!CanEdit)" />
        <div class="form-text">Username of account to connect to proxy server with.</div>
        <ValidationMessage For="() => _connection.ProxyUser" />
    </div>

    <div class="@CssClass">
        <label class="form-label">Proxy Password</label>
        <InputText ValueExpression="@(() => _connection.ProxyPassword)"
               Value="@_connection.ProxyPassword"
               ValueChanged="(v) => OnValueChanged(x => x.ProxyPassword, v)"
               class="form-control form-control-sm"
               type="password"
               disabled="@(!CanEdit)" />
        <div class="form-text">Password of account to connect to proxy server with.</div>
        <ValidationMessage For="() => _connection.ProxyPassword" />
    </div>
}